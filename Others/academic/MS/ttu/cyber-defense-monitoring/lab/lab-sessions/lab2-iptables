# in INPUT chain, accept all “established connections” and traffic 
# related to them (state=RELATED,ESTABLISHED)
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# in INPUT chain, accept all incoming packets over the loopback interface
iptables -A INPUT -i lo -j ACCEPT

# in INPUT chain, accept connection attempts (NEW) to local sshd and httpd
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp -s 192.168.56.0/24 --dport 80 \
  -m state --state NEW -j ACCEPT

# accept connection attempts (NEW) to syslog and NTP daemon
iptables -A INPUT -p udp -s 192.168.56.1 --dport 514 \
  -m state --state NEW -j ACCEPT
iptables -A INPUT -p udp -s 192.168.56.1 --dport 123 \
  -m state --state NEW -j ACCEPT

# log and drop everything not covered by previous rules
iptables -A INPUT -j LOG --log-prefix 'iptables: '
iptables -A INPUT -j DROP

--------------------------------------------------------------------

# create a separate chain

iptables -N MYCHAIN

# accept packets that go to TCP ports 22 and 80, and have SYN flag set 
# but ACK, RST, and FIN must all be clear
# (standard TCP connection initiation packets to 22/tcp or 80/tcp)

iptables -A MYCHAIN -p tcp --syn --dport 22 -j ACCEPT
iptables -A MYCHAIN -s 192.168.56.0/24 -p tcp --syn --dport 80 -j ACCEPT

# match established TCP connections (including ACK-FIN and ACK-RST
# packets which terminate connections, and SYN-ACK packets from servers
# which establish connections)

iptables -A MYCHAIN -p tcp --tcp-flags ACK ACK -j ACCEPT

# permit all traffic over loopback interface

iptables -A MYCHAIN -p tcp -i lo -j ACCEPT

# drop all other TCP traffic

iptables -A MYCHAIN -p tcp -j LOG --log-prefix 'iptables: '
iptables -A MYCHAIN -p tcp -j DROP

# direct TCP packets from INPUT chain to MYCHAIN

iptables -I INPUT -p tcp -j MYCHAIN

# Unfortunately, these rules do not catch fake packets -- it is possible 
# for someone to send in a bad packet that is made to look like a part of 
# an established connection, but actually is not (e.g., with nmap -sA).
# Moreover, the approach works only for TCP protocol -- it is impossible
# to detect connections for UDP or ICMP.
#
# Note on matching fragmented packets -- iptables has -f matching option
# for matching second and further fragments  of fragmented packets. 
# However, if connection tracking is active in netfilter firewall and
# nf_conntrack_ipv4 kernel module is loaded, this also loads 
# nf_defrag_ipv4 module which defragments packets (needed for reliable
# connection tracking)
